package com.fulton_shaw.idea.plugin.x1.action.terminal.group;

import com.intellij.openapi.editor.colors.EditorColorsManager;
import com.intellij.openapi.editor.colors.EditorColorsScheme;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.ui.IdeBorderFactory;
import com.intellij.ui.components.JBCheckBox;
import com.intellij.ui.components.JBList;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * @author xiaohuadong  (put comment here)
 * @date 2019/04/23
 */
public class FultonTerminalSettingsPanel {
    private FultonTerminalOptionsProvider.SingleTabState state;

    // whole panel
    private JPanel myWholePanel;

    private JTextField myStartDirectoryField;
    private JPanel myGlobalSettingsPanel;
    private JTextField myTabNameTextField;
    private TextFieldWithBrowseButton myShellPathField;
    private JPanel myConfigurablesPanel;
    private JTextArea myExecuteCommandField;
    private JTextField myShellOptions;
    private JBCheckBox myIsCygwin;
    private JBList<String> myColorScheme;
    private List<String> schemes;

    public FultonTerminalSettingsPanel() {
        // initiate the model
        ListModel<String> model = new AbstractListModel<String>() {
            @Override
            public int getSize() {
                return getSchemes().size();
            }

            @Override
            public String getElementAt(int index) {
                return getSchemes().get(index);
            }
        };
        myColorScheme.setModel(model);
    }

    public List<String> getSchemes() {
        if (schemes == null) {
            schemes = new ArrayList<>();
            for (EditorColorsScheme scheme : EditorColorsManager.getInstance().getAllSchemes()) {
                schemes.add(scheme.getName());
            }
        }
        return schemes;
    }

    public FultonTerminalOptionsProvider.SingleTabState getState() {
        return state;
    }

    public void refreshState(FultonTerminalOptionsProvider.SingleTabState state) {
        this.state = state;
//        myWholePanel.setBorder(IdeBorderFactory.createTitledBorder("Profiles Settings"));
        myTabNameTextField.setText(state.getTitle());
        myShellPathField.setText(state.getShellPath());
        myStartDirectoryField.setText(state.getStartDirectory());
        myExecuteCommandField.setText(state.getStartupScript());
        myShellOptions.setText(state.getShellOptions());
        myIsCygwin.setSelected(state.isCygwin());
        myColorScheme.setSelectedIndex(colorToIndex(state.getColorScheme()));
    }

    public JPanel getRootPanel() {
        return myWholePanel;
    }

    public boolean isModified() {
        return
                !Objects.equals(myTabNameTextField.getText(), state.getTitle()) ||
                        !Objects.equals(myShellPathField.getText(), state.getShellPath()) ||
                        !Objects.equals(myStartDirectoryField.getText(), state.getStartDirectory()) ||
                        !Objects.equals(myExecuteCommandField.getText(), state.getStartupScript()) ||
                        !Objects.equals(myShellOptions.getText(), state.getShellOptions()) ||
                        !Objects.equals(myIsCygwin.isSelected(), state.isCygwin()) ||
                        !Objects.equals(getSelectedColorScheme(), state.getColorScheme())
                ;
    }

    /**
     * negative value, max value are ignroed
     *
     * @return
     */
    private String getSelectedColorScheme() {
        int idx = myColorScheme.getSelectedIndex();
        return idx < 0 || idx == Integer.MAX_VALUE ? null : getSchemes().get(idx);
    }

    private int colorToIndex(String scheme) {
        for (int i = 0; i < getSchemes().size(); i++) {
            if (Objects.equals(getSchemes().get(i), scheme)) {
                return i;
            }
        }
        return Integer.MAX_VALUE;
    }

    public void apply() {
        state.setTitle(myTabNameTextField.getText());
        state.setShellPath(myShellPathField.getText());
        state.setStartDirectory(myStartDirectoryField.getText());
        state.setStartupScript(myExecuteCommandField.getText());
        state.setShellOptions(myShellOptions.getText());
        state.setCygwin(myIsCygwin.isSelected());
        state.setColorScheme(getSelectedColorScheme());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myWholePanel = new JPanel();
        myWholePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(8, 4, new Insets(0, 0, 0, 0), -1, -1));
        myWholePanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 0, 7, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        myGlobalSettingsPanel = new JPanel();
        myGlobalSettingsPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(myGlobalSettingsPanel, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(12, 3, new Insets(0, 0, 0, 0), -1, -1));
        myGlobalSettingsPanel.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setHorizontalTextPosition(2);
        label1.setText("Shell path");
        panel2.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myShellPathField = new TextFieldWithBrowseButton();
        myShellPathField.setToolTipText("Shell path, you can specify 'Powershell','cmd','bash(cygwin)', 'bash(linux)',...etc");
        panel2.add(myShellPathField, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Startup commands");
        panel2.add(label2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new GridConstraints(4, 1, 8, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        myExecuteCommandField = new JTextArea();
        myExecuteCommandField.setPreferredSize(new Dimension(0, 400));
        myExecuteCommandField.setToolTipText("The command will be directly sent to the terminal on startup");
        scrollPane1.setViewportView(myExecuteCommandField);
        myShellOptions = new JTextField();
        myShellOptions.setToolTipText("Shell options, useful for 'bash', like that '--login -i'");
        panel2.add(myShellOptions, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setHorizontalTextPosition(2);
        label3.setText("Tab name");
        panel2.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myTabNameTextField = new JTextField();
        myTabNameTextField.setToolTipText("The identifying name to be used under action context");
        panel2.add(myTabNameTextField, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setHorizontalTextPosition(2);
        label4.setText("Shell options");
        label4.setToolTipText("Shell options, should be string splited");
        panel2.add(label4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setHorizontalTextPosition(2);
        label5.setText("Working directory");
        label5.setToolTipText("Shell options, should be string splited");
        panel2.add(label5, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myStartDirectoryField = new JTextField();
        myStartDirectoryField.setText("");
        myStartDirectoryField.setToolTipText("The working directory, you can use '${VAR}' to reference variables in enviornment, jvm properties.Additional IDEA special variables are: 'SELECTED' -- the file you selected, 'PROJECT_ROOT' -- the project root,'WORKSPACE_ROOT' -- the workspace root,often '.idea'");
        panel2.add(myStartDirectoryField, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        myConfigurablesPanel = new JPanel();
        myConfigurablesPanel.setLayout(new BorderLayout(0, 0));
        myGlobalSettingsPanel.add(myConfigurablesPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        myGlobalSettingsPanel.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        myIsCygwin = new JBCheckBox();
        myIsCygwin.setText("Is a Cygwin Terminal");
        myIsCygwin.setMnemonic('I');
        myIsCygwin.setDisplayedMnemonicIndex(0);
        myIsCygwin.setToolTipText("Is your shell a cygwin? Note: on windows 10 you may set this option when using cygwin, on Windows 7 it seems not necessary.");
        panel3.add(myIsCygwin, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setHorizontalTextPosition(2);
        label6.setText("Color Scheme");
        label6.setToolTipText("Choose a color scheme that fits your eyes");
        panel3.add(label6, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        myColorScheme = new JBList();
        myColorScheme.setToolTipText("the color scheme,  '_@user_Default' is traditional, '_@user_Darcula' for black mode.");
        panel3.add(myColorScheme, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        label4.setLabelFor(myShellOptions);
        label5.setLabelFor(myShellOptions);
        label6.setLabelFor(myShellOptions);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myWholePanel;
    }
}
